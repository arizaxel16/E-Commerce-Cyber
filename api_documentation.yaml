openapi: 3.0.3
info:
  title: Lab E-commerce API
  version: "1.0.0"
  description: |
    API for the local lab e-commerce platform used in the Cybersecurity course.
    Authentication uses JWT Bearer tokens. Sensitive endpoints require appropriate roles
    (ADMIN or authenticated USER). Payment endpoints are simulated â€” **do not** use real cards.
servers:
  - url: http://localhost:8080/api
    description: Local dev server (default)

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    UUID:
      type: string
      format: uuid

    Timestamp:
      type: string
      format: date-time

    Error:
      type: object
      properties:
        status:
          type: integer
        message:
          type: string

    AuthRegisterRequest:
      type: object
      required: [email, password, fullName]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          description: "Plain password sent once; will be hashed server-side (bcrypt/argon2)."
        fullName:
          type: string
        photoBase64:
          type: string
          description: "Optional - base64 image for quick registration (or use upload endpoint)."

    AuthLoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
        password:
          type: string

    AuthTokenResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: "Short-lived JWT (recommended 5-15 min)"
        refreshToken:
          type: string
          description: "Longer-lived refresh token"

    UserPublic:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        email:
          type: string
        fullName:
          type: string
        photoUrl:
          type: string
        role:
          type: string
        status:
          type: string
        createdAt:
          $ref: '#/components/schemas/Timestamp'

    UserProfileUpdate:
      type: object
      properties:
        fullName:
          type: string
        photoBase64:
          type: string

    Product:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        sku:
          type: string
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: double
        stock:
          type: integer
        isActive:
          type: boolean
        primaryImageUrl:
          type: string
        createdAt:
          $ref: '#/components/schemas/Timestamp'

    ProductCreate:
      type: object
      required: [name, price]
      properties:
        sku:
          type: string
        name:
          type: string
        description:
          type: string
        price:
          type: number
        stock:
          type: integer

    ProductImage:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        productId:
          $ref: '#/components/schemas/UUID'
        fileUrl:
          type: string
        isPrimary:
          type: boolean
        createdAt:
          $ref: '#/components/schemas/Timestamp'

    Comment:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        productId:
          $ref: '#/components/schemas/UUID'
        userId:
          $ref: '#/components/schemas/UUID'
        rating:
          type: integer
          minimum: 1
          maximum: 5
        content:
          type: string
        isVisible:
          type: boolean
        createdAt:
          $ref: '#/components/schemas/Timestamp'

    Coupon:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        code:
          type: string
        description:
          type: string
        discountType:
          type: string
          enum: [PERCENT, AMOUNT]
        discountValue:
          type: number
        newUserOnly:
          type: boolean
        validFrom:
          $ref: '#/components/schemas/Timestamp'
        validTo:
          $ref: '#/components/schemas/Timestamp'

    CouponCreate:
      type: object
      required: [code, discountType, discountValue]
      properties:
        code: { type: string }
        description: { type: string }
        discountType:
          type: string
          enum: [PERCENT, AMOUNT]
        discountValue:
          type: number
        newUserOnly:
          type: boolean
        validFrom:
          $ref: '#/components/schemas/Timestamp'
        validTo:
          $ref: '#/components/schemas/Timestamp'
        maxRedemptions:
          type: integer

    OrderItemRequest:
      type: object
      required: [productId, quantity]
      properties:
        productId:
          $ref: '#/components/schemas/UUID'
        quantity:
          type: integer
          minimum: 1

    OrderCreateRequest:
      type: object
      required: [items, shippingAddress, billingAddress]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemRequest'
        couponCode:
          type: string
        shippingAddress:
          type: string
        billingAddress:
          type: string

    OrderSummary:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        userId:
          $ref: '#/components/schemas/UUID'
        status:
          type: string
        totalAmount:
          type: number
        createdAt:
          $ref: '#/components/schemas/Timestamp'

    OrderDetail:
      allOf:
        - $ref: '#/components/schemas/OrderSummary'
        - type: object
          properties:
            items:
              type: array
              items:
                type: object
                properties:
                  productId: { $ref: '#/components/schemas/UUID' }
                  name: { type: string }
                  quantity: { type: integer }
                  unitPrice: { type: number }
                  totalPrice: { type: number }
            shippingAddress: { type: string }
            billingAddress: { type: string }
            couponId: { $ref: '#/components/schemas/UUID' }

    PaymentRequest:
      type: object
      required: [cardNumber, expiryMonth, expiryYear, cvv]
      properties:
        cardNumber:
          type: string
          description: "SIMULATED: DO NOT USE REAL CARD NUMBERS"
        expiryMonth:
          type: integer
        expiryYear:
          type: integer
        cvv:
          type: string
        saveCard:
          type: boolean
          description: "If true, backend may store tokenized card_last4 + token."

    PaymentResult:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        orderId:
          $ref: '#/components/schemas/UUID'
        paymentStatus:
          type: string
          enum: [PENDING, COMPLETED, FAILED]
        amount:
          type: number
        processedAt:
          $ref: '#/components/schemas/Timestamp'
        cardLast4:
          type: string

    AuditLogEntry:
      type: object
      properties:
        id: { $ref: '#/components/schemas/UUID' }
        userId: { $ref: '#/components/schemas/UUID' }
        action: { type: string }
        ipAddress: { type: string }
        metadata: { type: object }
        createdAt: { $ref: '#/components/schemas/Timestamp' }

  parameters:
    page:
      name: page
      in: query
      schema:
        type: integer
        default: 0
    size:
      name: size
      in: query
      schema:
        type: integer
        default: 20
    q:
      name: q
      in: query
      schema:
        type: string
      description: "Search query (product name/description)"

security:
  - bearerAuth: []

tags:
  - name: Auth
    description: "Authentication & registration"
  - name: Users
    description: "User profile and uploads"
  - name: Products
    description: "Product catalog and images"
  - name: Comments
    description: "Product comments / ratings"
  - name: Coupons
    description: "Coupons creation and redemption"
  - name: Orders
    description: "Orders and line items"
  - name: Payments
    description: "Simulated payment capture"
  - name: Admin
    description: "Admin-only operations"
  - name: System
    description: "Health and misc"

paths:

  /auth/register:
    post:
      tags: [Auth]
      summary: "Register a new user (starts with PENDING status)"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRegisterRequest'
      responses:
        "201":
          description: "User created. Admin approval required to activate account."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPublic'
        "400":
          description: "Validation error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      tags: [Auth]
      summary: "Log in (returns access + refresh tokens). Only ACTIVE users can obtain tokens."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthLoginRequest'
      responses:
        "200":
          description: "JWT tokens"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokenResponse'
        "401":
          description: "Invalid credentials or user not active"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/refresh:
    post:
      tags: [Auth]
      summary: "Refresh access token using refresh token"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [refreshToken]
              properties:
                refreshToken:
                  type: string
      responses:
        "200":
          description: "New token pair"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokenResponse'
        "401":
          description: "Invalid refresh token"

  /auth/me:
    get:
      tags: [Auth]
      summary: "Get profile of authenticated user"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "User profile"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPublic'
        "401":
          $ref: '#/components/responses/Unauthorized'

  /users/{userId}/photo:
    post:
      tags: [Users]
      summary: "Upload or replace a user's profile photo (multipart)"
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: "Upload successful; returns user public profile"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPublic'
        "403":
          description: "Not allowed to change another user's photo"

  /users/{userId}:
    get:
      tags: [Users]
      summary: "Get user public profile by id"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        "200":
          description: "Public profile"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPublic'
    put:
      tags: [Users]
      summary: "Update authenticated user's profile (only allowed for self or admin)"
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileUpdate'
      responses:
        "200":
          description: "Updated profile"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPublic'
        "403":
          description: "Forbidden"

  /products:
    get:
      tags: [Products]
      summary: "List products (public)"
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
        - $ref: '#/components/parameters/q'
      responses:
        "200":
          description: "Paged product list"
          content:
            application/json:
              schema:
                type: object
                properties:
                  page:
                    type: integer
                  size:
                    type: integer
                  total:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
    post:
      tags: [Products]
      summary: "Create a new product (ADMIN only)"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreate'
      responses:
        "201":
          description: "Product created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "403":
          description: "Admin required"

  /products/{productId}:
    get:
      tags: [Products]
      summary: "Get product detail"
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        "200":
          description: "Product detail"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    put:
      tags: [Products]
      summary: "Update product (ADMIN only)"
      security:
        - bearerAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreate'
      responses:
        "200":
          description: "Updated product"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    delete:
      tags: [Products]
      summary: "Delete (deactivate) product (ADMIN only)"
      security:
        - bearerAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        "204":
          description: "Deleted"

  /products/{productId}/images:
    post:
      tags: [Products]
      summary: "Upload product image(s) (ADMIN only). Accepts multipart/form-data"
      security:
        - bearerAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
                isPrimary:
                  type: boolean
      responses:
        "201":
          description: "Created image records"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductImage'

    get:
      tags: [Products]
      summary: "List product images"
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        "200":
          description: "Images for product"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductImage'

  /products/{productId}/comments:
    get:
      tags: [Comments]
      summary: "List comments for a product (publicâ€”only visible comments)"
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        "200":
          description: "Comments list"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'

    post:
      tags: [Comments]
      summary: "Add a comment / rating to a product (AUTH required)"
      security:
        - bearerAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [rating, content]
              properties:
                rating:
                  type: integer
                  minimum: 1
                  maximum: 5
                content:
                  type: string
      responses:
        "201":
          description: "Comment created (pending visibility unless auto-approve)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        "400":
          description: "Validation error"

  /comments/{commentId}/moderate:
    put:
      tags: [Admin, Comments]
      summary: "Moderate visibility of a comment (ADMIN only)"
      security:
        - bearerAuth: []
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                isVisible:
                  type: boolean
      responses:
        "200":
          description: "Updated comment"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'

  /coupons:
    get:
      tags: [Coupons]
      summary: "List coupons (ADMIN or public depending on implementation)"
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
      responses:
        "200":
          description: "Paged coupon list"
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Coupon'
    post:
      tags: [Admin, Coupons]
      summary: "Create coupon (ADMIN only)"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CouponCreate'
      responses:
        "201":
          description: "Coupon created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coupon'

  /coupons/{code}/redeem:
    post:
      tags: [Coupons]
      summary: "Redeem coupon for current user (applies to next or current order depending on flow)"
      security:
        - bearerAuth: []
      parameters:
        - name: code
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                orderId:
                  $ref: '#/components/schemas/UUID'
      responses:
        "200":
          description: "Coupon accepted (response includes discount info)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coupon'
        "400":
          description: "Invalid or not applicable"
        "403":
          description: "Coupon restricted (e.g., new user only)"

  /orders:
    get:
      tags: [Orders]
      summary: "List orders for authenticated user (ADMIN can view all)"
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
      responses:
        "200":
          description: "Paged orders"
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/OrderSummary'
    post:
      tags: [Orders]
      summary: "Create an order (checkout). Returns order summary and pending payment"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCreateRequest'
      responses:
        "201":
          description: "Order created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetail'
        "400":
          description: "Invalid order (e.g., out of stock)"

  /orders/{orderId}:
    get:
      tags: [Orders]
      summary: "Get order detail (owner or ADMIN)"
      security:
        - bearerAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        "200":
          description: "Order detail"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetail'
        "403":
          description: "Forbidden"

  /orders/{orderId}/pay:
    post:
      tags: [Payments]
      summary: "Simulate payment capture for an order (AUTH required; use test cards only)"
      security:
        - bearerAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentRequest'
      responses:
        "200":
          description: "Payment processed (simulated)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResult'
        "400":
          description: "Invalid card or order state"

  /payments/{paymentId}:
    get:
      tags: [Payments]
      summary: "Get payment record (owner or ADMIN)"
      security:
        - bearerAuth: []
      parameters:
        - name: paymentId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        "200":
          description: "Payment record"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResult'

  /admin/users:
    get:
      tags: [Admin]
      summary: "List users (ADMIN only). Use filters to list PENDING users to approve."
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [PENDING, ACTIVE, REJECTED]
      responses:
        "200":
          description: "Users list"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserPublic'

  /admin/users/{userId}/approve:
    put:
      tags: [Admin]
      summary: "Approve a pending user (sets status to ACTIVE)"
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                notify:
                  type: boolean
                  default: true
      responses:
        "200":
          description: "User approved"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPublic'
        "403":
          description: "Admin required"

  /admin/users/{userId}/reject:
    put:
      tags: [Admin]
      summary: "Reject a pending user (sets status to REJECTED)"
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
      responses:
        "200":
          description: "User rejected"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPublic'

  /admin/products/{productId}/stock:
    patch:
      tags: [Admin, Products]
      summary: "Adjust product stock (ADMIN only)"
      security:
        - bearerAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [stock]
              properties:
                stock:
                  type: integer
      responses:
        "200":
          description: "Updated product"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

  /admin/audit-logs:
    get:
      tags: [Admin]
      summary: "Query audit logs (ADMIN only). Use filters for time range / action / user."
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: userId
          schema:
            type: string
        - in: query
          name: action
          schema:
            type: string
        - in: query
          name: from
          schema:
            type: string
            format: date-time
        - in: query
          name: to
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: "Audit log entries"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuditLogEntry'

  /health:
    get:
      tags: [System]
      summary: "Health check"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "UP"

components/responses:
  Unauthorized:
    description: "Unauthorized"
    content:
      application/json:
        schema:
          $ref: '#/components/schemas/Error'

